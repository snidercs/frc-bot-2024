local config  = require('config')
local gamepad = require('gamepad')
local params  = require('params')
local robot   = require('robot')

local function update_shooter()
    if gamepad.left_bumper_pressed() then
        robot.intake()
    elseif gamepad.right_bumper_pressed() then
        robot.shoot()
    end
end

--------------------------------------------------------------------------------
local function init()
    -- local team = config.get('team_name')
    -- print(team .. " ready to roll")
end

local function autonomous_init()
end

local function autonomous()
end

--------------------------------------------------------------------------------
local function teleop_init()
end

local function teleop()
end

--------------------------------------------------------------------------------
local function test_init()
end

local function test()
    robot.drive(params.speed() * (1.0 - params.brake()), params.rotation())
    update_shooter()
end

local function test_exit()
    print ("test mode exited")
end

---A Timed robot descriptor.
---
---The c++ RomainMain will call these functions while running. Think of this file
---as a "Plugin" to the system with a common interface defined in this table.
---Using this interface more engine plugins can be written and swapped out
-- while the bot is running.
---@meta
---@see config.engine.period Engine timeout period (ms)
---@class Engine
---@field init function Robot initialization called once before anything else.
---@field teleop_init function Called once before starting teleop mode
---@field teleop function Called repeatedly for a defined period.
---@field autonomous_init function Called once before starting auto mode
---@field autonomous function Called repeatedly for a defined period in config
---@field test_init function Called once before starting test mode
---@field test function Called repeatedly for a defined period in config

return {
    init = init,
    teleop_init = teleop_init,
    teleop = teleop,
    autonomous_init = autonomous_init,
    autonomous = autonomous,
    test_init = test_init,
    test = test,
    test_exit = test_exit
}
