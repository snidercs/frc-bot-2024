plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2024.2.1"
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcCpp(getArtifactTypeClass('FRCNativeArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('robot')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcCpp

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Set to true to run simulation in debug mode
wpi.cpp.debugSimulation = false

// Default enable simgui
wpi.sim.addGui().defaultEnabled = true
// Enable DS but not by default
wpi.sim.addDriverstation().defaultEnabled = true

model {
    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            sources.cpp {
                source {
                    srcDir 'src'
                    include '**/*.cpp', '**/*.cc'
                }
                exportedHeaders {
                    srcDir 'src'
                }
            }
        
            // Set deploy task to deploy this component
            deployArtifact.component = it

            // Enable run tasks for this component
            wpi.cpp.enableExternalTasks(it)

            // Enable simulation for this component
            wpi.sim.enable(it)
            // Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
        }
    }
    testSuites {
        frcUserProgramTest(GoogleTestTestSuiteSpec) {
            testing $.components.frcUserProgram

            sources.cpp {
                source {
                    srcDir 'test'
                    include '**/*.cpp'
                }
            }

            // Enable run tasks for this component
            wpi.cpp.enableExternalTasks(it)

            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
            wpi.cpp.deps.googleTest(it)
        }
    }
}

tasks.withType(CppCompile).configureEach {
    includes {
        'build/include'
    }

    compilerArgs.addAll toolChain.map { toolChain ->
        if (toolChain in [ Gcc, Clang ]) {
            return []
        } else if (toolChain in VisualCpp) {
            return []
        }
        return []
    }
}

tasks.withType(LinkExecutable).configureEach {
    String platform = targetPlatform.get().name
    if (platform == 'linuxx86-64' || platform == 'linuxathena') {
        linkerArgs.addAll '-L', projectDir.toString() + '/build/lib/' + platform + '/release', '-lluajit'
    }
}

tasks.register('copyLuaHeaders') {
    doLast {
        copy {
            from('./vendordeps/luajit/src') {
                include 'lua.hpp', 'luajit.h', 'lua.h', 'luaconf.h', 'lualib.h', 'lauxlib.h'
            }
            into 'build/include'
        }
    }
}

String addLuaMakeTarget(String platform, String config, List<String> command) {
    String target = "buildLua${platform}${config}"
    String folder = "build/lib/${platform.toLowerCase()}/${config.toLowerCase()}"
    String incDir = "build/include/${platform.toLowerCase()}/${config.toLowerCase()}"
    String workDir = "vendordeps/luajit"
    tasks.register(target) {
        if (command.get(0) == 'make') {
            doLast {
                exec {
                    workingDir workDir
                    commandLine 'make', 'clean'
                }
                delete {
                    delete fileTree('luajit') {
                        include 'libluajit*a'
                    }
                }
                exec {
                    workingDir workDir
                    commandLine command
                }
                copy {
                    from(workDir + "/src") {
                        include 'libluajit*a'
                    }
                    into folder
                    rename '(.+)', 'libluajit.a'
                }
                copy {
                    from(workDir + "/src") {
                        include 'lua.h', 'luaconf.h', 'lualib.h', 'lauxlib.h'
                    }
                    into incDir
                }
            }
        } else {
            doLast {
                exec {
                    workingDir 'jni/luajit'
                    commandLine command
                }
            }
        }
    }
    return target
}

void buildLuaTargets(String... targets) {
    tasks.register('buildLua') {
        dependsOn 'copyLuaHeaders', targets
    }
    // disabling concurrency
    for (int i = 0; i < targets.length - 1; ++i) {
        for (int j = i + 1; j < targets.length; ++j) {
            tasks.getByName(targets[j]).mustRunAfter(tasks.getByName(targets[i]))
        }
    }
}

buildLuaTargets(
    addLuaMakeTarget('Linuxx86-64', "Release",
            ['make', 'CC=gcc -m64',
             'CFLAGS=-fPIC',
             'TARGET_SYS=Linux',
             'BUILDMODE=static', 'PREFIX=/','DESTDIR=build/dist']),
    // addLuaMakeTarget('LinuxAthena', "Release",
    //         ['make', 'CROSS=arm-nilrt-linux-gnueabi-',
    //          'CFLAGS=-fPIC',
    //          'TARGET_SYS=Linux',
    //          'BUILDMODE=static', 
    //          'PREFIX=/',
    //          'DESTDIR=build/dist'])
    // addLuaMakeTarget('Linuxathena', "Debug",
    //         ['make', 'CC=gcc -m64',
    //          'CFLAGS=-fPIC',
    //          'TARGET_SYS=Linux', 
    //          'BUILDMODE=static', 'PREFIX=/','DESTDIR=build/dist']),
    // addLuaMakeTarget('Linuxathena', "Release",
    //         ['make', 'CC=gcc -m64',
    //          'CFLAGS=-fPIC',
    //          'TARGET_SYS=Linux', 
    //          'BUILDMODE=static', 'PREFIX=/','DESTDIR=build/dist'])
)
